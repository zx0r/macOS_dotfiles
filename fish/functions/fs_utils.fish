# üõ†Ô∏è File System Utilities for Fish Shell
# Dependencies: rg (ripgrep), rga (ripgrep-all), fd, fzf

# üõ†Ô∏è Fish Functions for Finding & Managing Files

# 1Ô∏è‚É£ üîç Fuzzy Find Files using `fzf`
function fzf_find
    set file (fzf --preview 'bat --style=numbers --color=always --line-range=:100 {}')
    if test -n "$file"
        echo "üìÑ Selected: $file"
    else
        echo "‚ùå No file selected."
    end
end

# 2Ô∏è‚É£ üîç Find Files using `fd`
function fd_find
    set file (fd --type f "$argv" $HOME | fzf --preview 'bat --style=numbers --color=always --line-range=:100 {}')
    if test -n "$file"
        echo "üìÑ Selected: $file"
    else
        echo "‚ùå No file found for '$argv'."
    end
end

# 3Ô∏è‚É£ üîç Search File Contents using `rg`
function rg_find
    set file (rg --files-with-matches "$argv" $HOME | fzf --preview 'rg --context 5 --color=always --pretty {}')
    if test -n "$file"
        echo "üìÑ Found: $file"
    else
        echo "‚ùå No matches for '$argv'."
    end
end

# 4Ô∏è‚É£ üîç Search All File Contents using `rg-all`
function rg_all_find
    set file (rg-all --files-with-matches "$argv" $HOME | fzf --preview 'rg --context 5 --color=always --pretty {}')
    if test -n "$file"
        echo "üìÑ Found: $file"
    else
        echo "‚ùå No matches for '$argv'."
    end
end

# 5Ô∏è‚É£ üìÇ Find & Open Files using `fd`
function fd_open
    set file (fd --type f "$argv" $HOME | fzf --preview 'bat --style=numbers --color=always --line-range=:100 {}')
    if test -n "$file"
        echo "üìÇ Opening: $file"
        xdg-open "$file" >/dev/null 2>&1 &
    else
        echo "‚ùå No file selected."
    end
end

# 6Ô∏è‚É£ üìÇ Find & Delete Files with Confirmation
function fd_delete
    set file (fd --type f "$argv" $HOME | fzf --preview 'bat --style=numbers --color=always --line-range=:100 {}')
    if test -n "$file"
        echo "‚ö†Ô∏è Delete '$file'? (y/N)"
        read confirm
        if test "$confirm" = y
            rm "$file"
            echo "üóëÔ∏è File deleted: $file"
        else
            echo "‚úÖ Deletion canceled."
        end
    else
        echo "‚ùå No file selected."
    end
end

### Finding and Navigating Directories

# 1Ô∏è‚É£ Find & Navigate using `find`
function find_cd
    set dir (find $HOME -type d -name "$argv" -print -quit)
    if test -n "$dir"
        cd "$dir"
    else
        echo "‚ùå Directory '$argv' not found."
    end
end

# 2Ô∏è‚É£ Find repository using `ghq`
function ghq_find
    ghq list | grep "$argv"
end

# 3Ô∏è‚É£ Find directory using `fd`
function fd_find
    set dir (fd -t d "$argv" $HOME | fzf)
    if test -n "$dir"
        cd "$dir"
    else
        echo "‚ùå No matching directories found."
    end
end

# 4Ô∏è‚É£ List directories matching pattern
function ls_find
    ls -d $HOME/* | grep "$argv"
end

# 5Ô∏è‚É£ Combine multiple search methods and navigate
function find_project
    echo "üîç Searching for '$argv'..."

    set dir (find $HOME -type d -name "$argv" -print -quit)
    if test -n "$dir"
        echo "‚úÖ Found using 'find': $dir"
        cd "$dir"
        return
    end

    set dir (ghq list | grep "$argv")
    if test -n "$dir"
        echo "‚úÖ Found using 'ghq': $dir"
        return
    end

    set dir (fd -t d "$argv" $HOME | fzf)
    if test -n "$dir"
        echo "‚úÖ Found using 'fd': $dir"
        cd "$dir"
        return
    end

    echo "‚ùå No matches found for '$argv'."
end

### üìå Navigation & Directory Management

# Move up N levels in directory
function up
    set level (math (count $argv) + 1)
    eval cd (string repeat -n $level "../")
end

# Create directory and immediately enter it
function mkcd
    mkdir -p $argv[1]; and cd $argv[1]
end

# Change directory to Finder's current path (macOS only)
function cdf
    cd (osascript -e 'tell application "Finder" to get POSIX path of (target of front window as alias)')
end

### Manage Permissions (chmodx, chownme)

# Make a file executable
function chmodx
    chmod +x $argv
end

# Change file ownership to current user
function chownme
    sudo chown -R (whoami) $argv
end

### üîç FAST SEARCHING FUNCTIONS ###

# Search for files by name (recursive)
function ff
    find . -iname "*$argv*"
end

# Search for directories only
function fd
    find . -type d -iname "*$argv*"
end

# Search for text inside files
function search
    grep -rni "$argv" .
end

# 1Ô∏è‚É£ Search for files using ripgrep (`rg`)
function rgf
    rg --files | fzf --preview "bat --style=numbers --color=always --line-range=:100 {}"
end

# 2Ô∏è‚É£ Search for content inside files using ripgrep (`rg`)
function rgc
    rg --color=always --line-number "$argv" | fzf --ansi --preview "bat --style=numbers --color=always --line-range=:100 {1}"
end

# 3Ô∏è‚É£ Advanced search using ripgrep-all (`rga`) for PDFs, docs, etc.
function rga_search
    rga --color=always --line-number "$argv" | fzf --ansi --preview "bat --style=numbers --color=always --line-range=:100 {1}"
end

# 4Ô∏è‚É£ Fast file search using `fd`
function fdf
    fd . "$argv" --type file --hidden --exclude .git | fzf --preview "bat --style=numbers --color=always --line-range=:100 {}"
end

# 5Ô∏è‚É£ Search for directories using `fd`
function fdd
    fd . "$argv" --type d --hidden --exclude .git | fzf --preview "tree -C {} | head -50"
end

# 6Ô∏è‚É£ Fuzzy search & open files
function fo
    set file (fd . --type file | fzf --preview "bat --style=numbers --color=always --line-range=:100 {}")
    if test -n "$file"
        $EDITOR $file
    end
end

### üìÇ FILE & DIRECTORY NAVIGATION ###

# 7Ô∏è‚É£ Quickly navigate directories
function cdf
    set dir (fd . --type d --hidden --exclude .git | fzf --preview "tree -C {} | head -50")
    if test -n "$dir"
        cd "$dir"
    end
end

# 8Ô∏è‚É£ Open a directory in Finder (macOS)
function finder
    open .
end

### üóëÔ∏è FILE MANAGEMENT FUNCTIONS ###

# 9Ô∏è‚É£ Move files to trash (requires `trash-cli`)
function fdtrash
    fd . "$argv" --type file | fzf --preview "bat --style=numbers --color=always --line-range=:100 {}" | xargs trash-put
end

# üîü Remove files safely with confirmation
function rmf
    set file (fd . --type file | fzf --preview "bat --style=numbers --color=always --line-range=:100 {}")
    if test -n "$file"
        echo "‚ö†Ô∏è Are you sure you want to delete '$file'? (y/N)"
        read -l confirm
        if test "$confirm" = y
            rm -rf "$file"
        else
            echo "Canceled."
        end
    end
end

### üîÑ GIT & FILE TRACKING ###

# 1Ô∏è‚É£1Ô∏è‚É£ Search git-tracked files
function gitf
    git ls-files | fzf --preview "bat --style=numbers --color=always --line-range=:100 {}"
end

# 1Ô∏è‚É£2Ô∏è‚É£ Search untracked git files
function gituf
    git ls-files --others --exclude-standard | fzf --preview "bat --style=numbers --color=always --line-range=:100 {}"
end

# 1Ô∏è‚É£3Ô∏è‚É£ Git commit browser
function gitlog
    git log --oneline --graph --decorate --all | fzf --preview "git show --color=always {1}"
end

# 1Ô∏è‚É£4Ô∏è‚É£ Git branch selection
function gitbranch
    set branch (git branch | fzf)
    if test -n "$branch"
        git checkout "$branch"
    end
end

# Reload Fish configuration
function reload
    source ~/.config/fish/config.fish
    echo "üîÑ Fish configuration reloaded!"
end

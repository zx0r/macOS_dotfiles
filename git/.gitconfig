[include]
  #path = $HOME/.config/git/themes/colors.delta

[user]
	email = 
	name = zx0r

[core]
  excludesfile = $HOME/.config/git/.gitignore
  eol = lf
  editor = nvim
  pager = delta
  autocrlf = input
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
  #autocrlf = false
  symlinks = true
  commitGraph = true
  precomposeunicode = true
  bigFileThreshold = 512M
	logAllRefUpdates = false

[column]
  # auto column row dense nodense
  ui = auto column nodense
  branch = plain
  clean = auto column nodense
  status = auto column nodense
  tag = plain

[credential "https://github.com"]
 # helper =
 # helper = !/usr/bin/gh auth git-credential
  helper = osxkeychain

[credential "https://gist.github.com"]
  # helper =
    helper = osxkeychain
 # helper = !/usr/bin/gh auth git-credential

[checkout]
	defaultRemote = origin

[init]
	defaultBranch = main

[interactive]
  diffFilter = delta --color-only

[hub]
  protocol = ssh

[gitflow "prefix"]
  #emerge dev-vcs/git-flow
	versiontag = v

[gc]
  writeCommitGraph = true

[ghq]
 #https://github.com/x-motemen/ghq
  vcs = git
  root = ~/ghq

; [gpg]
;   program = /usr/bin/gpg

[global]
  ignore = .cargo,target,node_modules,.ipynb_checkpoints,downloads,music,movies,videos
# basedir = /home/zx0r/projects/github

[protocol "file"]
  allow = always

[sequence]
	editor = interactive-rebase-tool

[tig]
  #emerge dev-vcs/tig
  #https://github.com/jonas/tig
  line-graphics = utf-8
  tab-size = 2

[help]
  autocorrect = 1

[web]
  browser = safari

[filter "lfs"]
  #emerge dev-vcs/git-lfs
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

[url "git@github.com:"]
  # Always use GitHub SSH protocol to push.
  # Allows use of git:// for public repositories with push access
  pushInsteadOf = https://github.com/
  pushInsteadOf = http://github.com/
  pushInsteadOf = gh:
  insteadOf = gh:
  insteadOf = https://github.com/
  insteadOf = http://github.com/
  # pushInsteadOf = git://github.com/

[url "git@gitlab.com:"]
  insteadOf = https://gitlab.com/
  insteadOf = http://gitlab.com/
  insteadOf = "gl:"

[url "git://git.suckless.org/"]
  insteadOf = "suckless:"

[url "https://gist.github.com/"]
  insteadOf = "gist:"

[url "git@github.com:lmburns/"]
  # Customized reference to my repos
  insteadOf = "ghl:"

[apply]
  whitespace = fix  # Cleanup whitespace by default when apply patches

[blame]
  coloring = highlightRecent  # repeatedLines
  date = relative
  markUnblamableLines = true
  markIgnoredLines = true
  showEmail = true

#[blame "gpg"]
#  texconv = gpg --no-tty --decrypt --quiet

[clone]
  defaultRemoteName = origin

[commit]
  gpgsign = true
  template = $HOME/.config/git/gitmessage  # Use a template for commit message
  verbose = true                       # Show diff when preparing commit message

[diff]
  tool = nvim
  guitool = nvimdiff
  renames = copies
  algorithm = histogram  # patience
  colorMoved = default
  indentHeuristic = on
  mnemonicPrefix = true
  compactionHeuristic = true
[difftool]
  prompt = false
 [diff "nvim"]
  cmd="nvim -f -c 'Gvdiffsplit' '$MERGED'"
[diff "ruby"]
  funcname = "^ *\\(\\(def\\) .*\\)"
[diff "image"]
  textconv = identify
[diff "gpg"]
  texconv = gpg --no-tty --decrypt --quiet

[log]
  decorate = auto
  abbrevCommit = true

[merge]
  tool = nvim
  guitool = nvimdiff
  # Display diffs between ancestor commit and each of the two merge parents
  #   diff3 zdiff3
  conflictStyle = diff3
  # Equivalent to passing --ff-only
  ff = only
  renames = copies
  directoryRenames = conflict
  # Print diffstat between ORIG_HEAD and the merge result at the end of the merge
  stat = true
  # Along with branch names, show log with branch description text
  branchdesc = true
  # Along with branch names, show log with at most N 1-line descs from the merged commits
  log = true
[mergetool]
  keepBackup = false
  prompt = false
[mergetool "nvim"]
  cmd="nvim -f -c 'Gvdiffsplit' '$MERGED'"
  # cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[pack]
  sparse = true

[push]
  default = current  # Push to the set upstream branch being tracked by default
  followTags = false
#  followTags = true

[pull]
  ff = only
  default = current
  rebase = false
  #rebase = true

[rebase]
  # Run `git stash` if needed before a `git rebase`
  autoStash = true
  # Auto-add `--autosquash` to `git rebase`
  autoSquash = true

[status]
  short = true
  branch = false
	showUntrackedFiles = no
  #showUntrackedFiles no
  #showUntrackedFiles = all
  #showUntrackedFiles normal

[stash]
  showPatch = true

[tag]
  gpgsign = true
  sort = version:refname

[fetch]
  prune = true

# NOTE: Colors ==============================================================

[color]
  ui = true
  push = true
  status = true
  remote = true
  branch = true
  showBranch = true
  transport = true
  pager = true
  advice = true
  interactive = true

[color "branch"]
  current = "bold #7DAEA3"
  upstream = "bold #FE8019"
  local = "#EA6962"
  remote = "#819C3B"
  plain = "#957FB8"
  # master = "#A76C8C"
  # main = "#A4B494"

[color "blame"]
  highlightRecent = "blue,12 month ago,white,1 month ago,bold #7E82CC"
  repeatedLines = "#7DAEA3"

[color "push"]
  error = "bold #DC3958"
[color "transport"]
  rejected = "bold #DC3958"

[color "status"]
  header = "bold #7E82CC"
  added = "bold #819C3B"
  updated = "#4C96A8"
  changed = "#689D6A"
  untracked = "#EF1D55"
  branch = "bold #7DAEA3"
  nobranch = "bold #dc3958"
  localBranch = "bold #EA6962"
  remoteBranch = "bold #819C3B"
  unmerged = "#fe8019"

[color "diff"]
  context = "#C2A383"       # context text
  meta = "#5E452B"          # metainformation
  frag = "bold #FF5813"     # hunk header
  commit = "bold #A06469"
  whitespace = red reverse
  new = "bold #819C3B"
  old = "bold #DC3958"
  newMoved = "bold #819C3B"  # added lines
  oldMoved = "bold #DC3958"  # deleted lines
  func = "bold #A06469"

[color "remote"]
  hint = "bold #4C96A8"
  warning = "bold #FF9500"
  success = "bold #819C3B"
  error = "bold #EF1D55"

[color "decorate"]
  branch = "bold #7DAEA3"
  remoteBranch = "bold #819C3B"
  HEAD = "bold #7E82CC"
  tag = "bold #98676A"
  stash = "bold #D3869B"
  grafted = "#EA6962"

[color "interactive"]
  prompt = "bold #FE8019"
  header = "bold #7E5053"
  help = green bold
  error = red bold

; [color "advice"]
;   # Customized colors for hints
;   hint = ""

[color "grep"]
  context = "#A06469" bold
  filename = "#A06469" bold
  function = "#A06469" bold
  linenumber = "#A06469" bold
  match = "#A06469" bold
  matchContext = "#A06469" bold
  matchSelected = "#A06469" bold
  selected = "#A06469" bold
  separator = "#A06469" bold

[color "diff-highlight"]
  oldNormal = syntax "#461c16"
  oldHighlight = syntax "#742d21"
  newNormal = syntax "#182d09"
  newNormal = green bold
  newHighlight = green bold 22

# NOTE: Delta ==============================================================

[delta]
  features = cyberpunk-neon
  true-color = always
  dark = true
  syntax-theme = Monokai Extended

  # Core Display
  side-by-side = true
  line-numbers = true
  navigate = true
  hyperlinks = true
  tabs = 4
  paging = auto

  # Hyperlinks Configuration
  hyperlinks-file-link-format = "lazygit-edit://{path}:{line}"
  # hyperlinks-commit-link-format = "https://github.com/"

 # Wrapping Settings
  diff-stat-align-width = 48
  wrap-left-symbol = "↵"
  wrap-right-symbol = "↴"
  wrap-right-prefix-symbol = "…"
  wrap-max-lines = 2
  wrap-right-percent = 37.0

  # Neon Color Scheme
  zero-style = syntax
  plus-style = syntax "#002222"
  plus-emph-style = syntax "#004444"
  minus-style = syntax "#220022"
  minus-emph-style = syntax "#440044"
  whitespace-error-style = "reverse #FF00FF"
  plus-non-emph-style = syntax "#182d09"
  plus-empty-line-marker-style = syntax "#445321"
  minus-non-emph-style = syntax "#461c16"
  minus-empty-line-marker-style = syntax "#961134"
  whitespace-error-style = "reverse #938AA9"
  keep-plus-minus-markers = false
  inline-hint-style = "bold #A25BC4"

 # Line Numbers
 # line-fill-method = "ansi"  # ansi, spaces
  line-numbers-left-format = "┊{nm:>4}┊"
  line-numbers-left-style = "#00FFFF"
  line-numbers-right-format = "│{np:>4}│"
  line-numbers-right-style = "#00FFFF"
  line-numbers-minus-style = "bold #FF0066"
  line-numbers-plus-style = "bold #00FF66"
  line-numbers-zero-style = "#00FFFF"
  line-buffer-size = 32
  ### within-line diff algorithm
  max-line-distance = 0.3
  max-line-length = 512

  relative-paths = true
  right-arrow = "⟶  "
  file-added-label = [+]
  file-copied-label = [C]
  file-modified-label = [M]
  file-removed-label = [-]
  file-renamed-label = [R]
  file-style = "bold ul #00FFFF"
  file-decoration-style = "box #00FFFF"
  # file-transformation = 'sed command'

  # Commit and Blame
   # commit-style = raw
   # commit-decoration-style = bold ul "#98676A"
  commit-style = "bold #FF00FF"
  commit-decoration-style = "bold ul box #FF00FF"
  blame-format = "{author:<18} ({commit:>7}) ┊{timestamp:^16}┊ "
  blame-palette = "#101010 #200020 #002800 #000028 #202000 #280000 #002020 #002800 #202020"
  blame-code-style = syntax
  # blame-separator-format = "{n:^4_block}"
  blame-separator-format = "│{n:^4}│"
  blame-separator-style = "#7E602C"
  blame-timestamp-format = "%Y-%m-%d %H:%M:%S %z"

  hunk-label = "• "
  hunk-header-decoration-style = bold box ul "#FE8019"
  hunk-header-file-style = bold "#DC3958"
  hunk-header-line-number-style = "bold #938AA9"
  hunk-header-style = file line-number syntax bold

 # Merge Conflicts
  #merge-conflict-begin-symbol = "▼"
  #merge-conflict-end-symbol = "▲"
  merge-conflict-begin-symbol = "⟱"
  merge-conflict-end-symbol = "⟰"
  merge-conflict-ours-diff-header-decoration-style = "box bold #00FF88"
  merge-conflict-ours-diff-header-style = "bold #00FFFF"
  merge-conflict-theirs-diff-header-decoration-style = "box bold #FF00FF"
  merge-conflict-theirs-diff-header-style = "bold #FF00FF"

  # Grep Output Styling - Cyberpunk Edition
  grep-context-line-style = syntax "#000033"
  grep-file-style = "bold #00FFFF"
  grep-line-number-style = "bold #FF00FF"
  grep-match-line-style = syntax "#003333"
  grep-match-word-style = syntax "#00FF88"
  grep-separator-symbol = "⟫"

[delta "unobtrusive-line-numbers"]
  line-numbers = true
  line-numbers-minus-style = "bold #EF1D55"
  line-numbers-plus-style = "bold #819C3B"
  line-numbers-zero-style = "#7E602C"
  line-numbers-left-format = "{nm:>4}┊"
  line-numbers-right-format = "{np:>4}│"
  line-numbers-left-style = "#D9AE80"
  line-numbers-right-style = "#D9AE80"

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none
  hunk-header-decoration-style = yellow box newHighlight = syntax "#134d0d"

# NOTE: Alias ==============================================================

[alias]

  #delta = "!delta --hyperlinks-file-link-format=\"lazygit-edit://{path}:{line}\""
  # aliases = config --get-regexp alias
  aliases = !git config --list | rg 'alias\\.' | sed -E 's/alias\\.([^=]*)=(.*)/\\1\\ \t => \\2/' | sort
  alias-grep = !git config --list | rg '^alias\\.' | cut -c 7- | grep -Ei --color \"$1\" "#"

  # === Misc ===============================================================
  # Grab a pull request
  pro = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  # Grep history
  ghist = "!f() { git grep --color=always \"$1\" $(git rev-list --all); }; f"
  # ghistf = "!f() { git grep \"$1\" $(git rev-list --all -- \"$2\") -- \"$2\"; }; f"
  # wip - save work in progress quickly and ready to push it if necessary
  wip = "!f() { git checkout -b wip/\"$1\" && git add --update && git commit -m \"wip: $1\"; }; f"

  # === Directory ==========================================================
  # Show directory where this project is
  root = rev-parse --show-toplevel
  # Show directory where this project is
  toplevel = rev-parse --show-toplevel

  # === Remotes ============================================================
  # Get name of default remote
  upstream = !git remote | perl -lne 'print && exit if /(upstream|origin)/'
  # When lose upstream tracking branch run: git set-upstream; git pull;
  set-upstream = !git branch --set-upstream-to=origin/$(git symbolic-ref --short HEAD)

  # Add a URL named origin
  add-url = remote set-url --add origin
  # Get remote url
  origin = remote get-url origin
  # Change the existing origin URL
  set-origin = remote set-url origin
  # Add an origin
  add-origin = remote add origin
  # Display information about the default remote branch
  show-origin = remote show origin
  # List remotes
  remotes = remote -v
  # Add an origin
  rao = remote add origin

  # === Branch =============================================================
  br = branch
  # Get name of default head branch
  main = !git remote show $(git upstream) | awk '/HEAD branch/ {print $NF}'
  # Get name of default head branch (faster) TODO: finish
  mainf = branch --list master main
  # Show all local and remote branches & commits within them
  branch-commits = show-branch -a --more=10 --no-name --color=always
  # Create new branch off of default origin branch (origin/master or origin/main)
  branch-new = "!f() { [[ -n $@ ]] && git fetch origin && git checkout -b \"$@\" origin/$(git main) && git branch --unset-upstream; }; f"
  # List branches
  branches = branch -a --sort=-authordate --color=always
  # List remote branches
  ls-remote-branches = branch --remotes --sort=-authordate --color=always
  remote-branches = branch --remotes --sort=-authordate --color=always
  # List branches that haven't been merged
  unmerged-branches = branch --no-merged
  # Show all local and remote branches & commits within them
  sba = show-branch -a --more=10 --no-name --color=always
  # Export branch and its history to file
  export-branch = bundle create
  # Import a branch created with bundle: <repo> -b <branch>
  import-branch = clone repo.bundle
  # Archive the master branch
  archivem = !git archive $(git main) --format=zip --output=$(git main).zip
  # Rename (move) a branch
  branch-mv = branch -m
  # Copy a branch
  branch-cp = branch -c

  # Gets the name of the current branch
  # current-branch = branch --current
  # current-branch = rev-parse --abbrev-ref HEAD

  # === Add ================================================================
  a = add
  # Record path will be added later
  track = add -N
  # Partially add file
  partial = add -p
  # Record path will be added later
  addl = add -N
  # Partially add file
  addp = add -p

  # === Clone ==============================================================
  cl = clone
  clone1 = clone --depth 1
  clone2 = clone --depth 2
  cloneb = clone --bare
  clonef = clone --recurse-submodules

  # === Pull ===============================================================
  pl = pull
  plr = pull --rebase
  plm = pull --merge
  pullr = pull --rebase
  pullm = pull --merge
  # Undo a shallow clone
  unshallow = fetch --unshallow
  # Create a shallow clone (NOTE: see git-compact)
  mkshallow = !git pull --depth 1 && git gc --prune=all
  # Delete remote branches that no longer exist in origin
  prune = fetch --prune
  # prune-local = remote prune origin
  prune-all = fetch --all --prune
  # Cleanup repo without making it shallow
  clean-repo = !git remote prune origin && git repack && git prune-packed && git reflog expire --expire=1.month.ago && git gc --aggressive

  rm-refs = reflog expire --expire=1.month.ago

  # === Push ===============================================================
  ps = push
  pom = push origin master
  psom = push origin master
  psf = push --force
  psd = push --delete
  # Push to all remotes
  psa = !git remote | xargs -L1 git push --all
  # Push to all remotes
  pa = !git remote | xargs -L1 git push --all
  # Push to all remotes
  push-all = !git remote | xargs -L1 git push --all
  publish = !git remote | xargs -L1 git push --all

  # === Checkout ===========================================================
  co = checkout
  discard = checkout --
  # Create a new branch
  branchout = checkout -b
  # New branch with no history
  orphan = checkout --orphan
  # Switch to the previous branch
  back = switch -

  # === Commit =============================================================
  c = commit
  # Commit and message
  cm = commit -m
  # Commit, sign, and message
  csm = commit -S -m
  # Commit and sign
  cs = commit -S
  # Amend to last commit (same message)
  amend = commit -S --amend --reuse-message=HEAD
  # Amend to last commit
  resave = commit -S --amend
  # Reuse last commit again
  recommit = commit -S --reuse-message=HEAD
  # Change last commit's author
  reauthor = commit -S --reset-author --amend --no-edit
  # Mark the commit as a solution to the previous commit
  fixup = commit -S --fixup

  # === Cherry-pick ========================================================
  chp = cherry-pick
  chpn = cherry-pick --no-commit
  chpa = cherry-pick --abort
  chpc = cherry-pick --continue

  # === Reset ==============================================================
  unstage = reset -q HEAD --
  uncommit = reset --mixed HEAD~
  # Undo last
  undol = reset --soft HEAD^
  # Undo reset
  undo-reset = "!f() { [[ -n $1 ]] && git reset HEAD@{1} && git reset --hard origin/\"$1\"; }; f"
  # Undo the last push
  undo-push = "!f() { [[ -n $1 ]] && git push -f origin HEAD^:\"$1\"; }; f"
  # Clean working directory and startover
  nevermind = !git reset --hard HEAD && git clean -df
  # Clean working directory + ignored files and startover
  startover = !git reset --hard HEAD && git clean -dfx
  # Undo TODO: checkout
  undou = update-index --no-assume-unchanged

  r1 =  reset --hard HEAD~1
  r2 =  reset --hard HEAD~2
  r3 =  reset --hard HEAD~3
  rh1 =  reset --hard @{1}

  # === Revert =============================================================
  invert = revert

  # === Merge ==============================================================
  m = merge
  ma = merge --abort
  mF = merge --no-ff
  ms = merge --ff-only --squash
  mt = mergetool
  parent = merge-base HEAD

  # === Rebase =============================================================
  rewrite = rebase --interactive
  # Rebase interactive for all commits on feature branch
  rebase-branch = !git rebase -i $(git merge-base master HEAD)
  rb = rebase
  rbs = rebase --skip
  rbi = rebase --interactive
  rbe = rebase --edit-todo
  rbc = rebase --continue
  rba = rebase --abort
  rbt = rebase --strategy-option=theirs
  rbo = rebase --strategy-option=ours
  # Stash changes before rearranging
  rbst = rebase --autostash
  # Squash correction
  rbq = rebase -i --autosquash

  # === Diff ===============================================================
  d = diff
  dc = diff --cached
  diffc = diff --cached
  prestage = diff -w --word-diff=color
  precommit = diff --cached -w --word-diff=color --word-diff-regex='[^[:space:]<>]+'
  unmergedd = diff --name-only --diff-filter=U
  conflicts = !git --no-pager diff --name-only --diff-filter=U | xargs grep -c '^=======$'
  vd = difftool --tool=nvimdiff --no-prompt
  vdc = difftool --tool=nvimdiff --no-prompt --cached

  # === Remove =============================================================
  remove = rm
  rmc = rm --cached
  untrack = rm -r --cached

  # === Status =============================================================
  s = status -sb --renames
  sall = !git -c color.status=always status --long -b -uall --ignored --renames --show-stash --ignore-submodules=all
  changedc = !git -c color.status=always status --long -b -uno --renames
  changed = !git -c color.status=always status -sb -uno --renames
  overview = status -sb -uall
  what = show -w
  # Shows changes in current branch that have not been merged with the master
  unmergedc = !git cherry -v $(git main)

  # === Stash ==============================================================
  st = stash
  stp = stash pop
  stl = stash list
  sta = stash apply
  stc = stash clear
  std = stash drop
  sts = stash show -p --ext-diff
  stu = stash --include-untracked --keep-index
  stashes = stash list
  stash-all = stash save --include-untracked
  unstash = stash pop

  # === Bisect ==============================================================
  bs = bisect
  bsb = bisect bad
  bsg = bisect good
  bsr = bisect reset
  bss = bisect start

  # === Am ==================================================================
  fp = format-patch --stdout -1
  aa = am --abort
  ac = am --continue
  as = am --skip
  a3 = am --3way <

  # === Worktree ============================================================
  wt = worktree
  wtl = worktree list
  wta = worktree add
  wtr = worktree remove

  # === Tag ================================================================
  # List tags
  tags = tag -n1 --list
  # tags = tag -n1 --list --format="%(objectname) SPC %(objecttype) TAB %(refname)"
  # tags = tag -n1 --list --format="%(color:bold 52)%(objectname)%(color:reset) %(color:bold 48)%(HEAD)%(color:reset) %(contents:subject)"
  # Create a new tag
  tagc = tag --sign
  # Create a new tag with a message on the command line
  tagcm = tag --sign --message
  # Fetch tags
  fetch-tags = fetch --all --tags
  # Shows the most recent tags of the current branch
  # tag-latest = !git describe --tags $(git rev-list --tags --max-count=1)
  tag-latest = describe --tags --abbrev=0
  # Remove a tag locally and remotely
  rmtag = "!f() { [[ -n $1 ]] && git tag -d \"$1\" && git push origin \"refs/tags/$1\"; }; f"

  # === Submodule ==========================================================
  sub = submodule
  sub-pull = submodule foreach git pull
  sub-checkout = submodule foreach git checkout master
  sub-update = submodule update --init --recursive
  sub-upgrade = submodule update --init --remote

  # === Browser ============================================================
  # Open repository in the browser
  open = brws
  b = brws

  # === Latest =============================================================
  # latest-tag = !git describe --tags $(git rev-list --tags --max-count=1)
  latest-tag = describe --tags --abbrev=0

  # === Count ==============================================================
  # Count number of commits
  count-commit = rev-list HEAD --count
  # Count unprepared objects and their disk size
  count-obj = count-objects --human-readable

  # === Ls-variants ========================================================
  ls-contribs = shortlog --summary --numbered
  ls-remotes = remote -v
  ls-branches = branch -a --sort=-authordate --color=always
  ls-branch-commits = show-branch -a --more=10 --no-name --color=always
  ls-subs = submodule status
  ls-stashes = stash list
  ls-tags = tag -n1 --list
  # Retrieve the commit hash from the initial revision
  first-commit = !git rev-list --reverse HEAD | head -1

  # === Files ==============================================================
  # List tracked files in an actual tree with 'as-tree'
  lsttr = ls-ttracked
  trr   = ls-ttracked
  # List untracked files in a tree
  lstutr = ls-tuntracked
  utr    = ls-tuntracked

  # tr = !git ls-tree -r $(git branch --show-current) --name-only

  # List tracked files
  # Files that are tracked
  ls-tracked = ls-tree -tr --name-only HEAD
  lstr       = ls-tracked
  tr         = ls-tracked
  # Files that are untracked
  ls-untracked = ls-files --others
  lsutr        = ls-untracked
  # Files with an unstaged deletion
  ls-deleted = ls-files --deleted
  lsdel      = ls-files --deleted
  # Files with an unstaged modification (includes deletion)
  ls-modified = ls-files --modified
  lsmod       = ls-files --modified
  # Untracked files that need to be removed
  ls-killed = ls-files --killed
  lskill    = ls-files --killed
  # Files that are untracked but respect .gitignore
  ls-new = ls-files --exclude-standard --others
  lsnew  = ls-files --exclude-standard --others
  # Files that are ignored
  ls-ignored = ls-files --exclude-standard --others --ignored
  lsign      = ls-files --exclude-standard --others --ignored
  # List the ignored files
  ignored = !git check-ignore *
  # Status of ignored files
  ignores = status --ignored
  # Ignore changes to the trace file
  ignore-changes = update-index --assume-unchanged

  # === Misc ===============================================================
  # Generate changelog
  chg = !git changelog -x > CHANGELOG.md
  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # === External ===========================================================
  fs = !fstat
  fa = !fadd
  fu = !funtrack

  # git notes
  # git maintenance
  # git restore                # restore working tree files
  # git replace                # create/list/delete refs to replace objects
  # git instaweb               # browse working directory in browser
  # git whatchanged            # commit logs and differences they introduced
  # git blame                  # revision for each line (use more)
  # git merge-base             # find best common ancestor for merge
  # git pr                     # list/checkout pull request
  # git pull-request           # create a new pull request

  # git diff-tree --stat HEAD

  # === git shortlog # summarize git log outuput ===========================
  # | --grep=        | --grep-reflog=         |
  # | --invert-grep  | --extended-regexp (-E) | --fixed-strings (-F)  --perl-regexp (-P)
  # | --skip=        | --number=              |
  # | --author=      | --committer=           |
  shortl = shortlog --pretty=ref --email

  # Summarize log output; group alphabetically by author
  sl = shortlog --pretty=ref --email
  # Summarize log output; group by author commit count
  sln = shortlog --pretty=ref --numbered --email

  # Summarize log output; group by alphabetically by committer
  slc = shortlog --committer --pretty=ref --email
  # Summarize log output; group by committer commit count
  slcn = shortlog --committer --pretty=ref --numbered --email

  # Summarize tag log
  slt = shortlog --pretty=ref --tags --email
  # Summarize tag log; group by author commit count
  sltn = shortlog --pretty=ref --tags --email --numbered

  # === git log # show commit logs =========================================
  logc  = log --color=always
  logp  = logc --patch
  logr  = logc --date=relative
  logpr = logp --date=relative
  logg  = logp  --graph
  loggr = logpr --graph

  l = logc --patch
  last = log -1 HEAD --format=format:"%Cred%H"
  # View the log and diff for a commit (previous if no SHA1 provided)
  details = logp -1 --format=fuller
  # Show commit of when a file was added
  whenadded = log --diff-filter=A
  # List the commits and changes of a specific file
  filetrail = logp --follow -w
  mergetrail = log --ancestry-path --merges

  # Show normal diffs
  # lpt   = !git -P loggr --tags | less
  # lpc   = !git -P loggr --cumulative | less
  # lpsc  = !git -P loggr --cumulative --stat | less
  # lpsx  = !git -P logg  --stat --ignore-all-space | less
  # lp    = !git -P loggr --stat -n20 | less
  lnt   = loggr --tags
  lnc   = loggr --cumulative
  lnsc  = loggr --cumulative --stat
  lnsx  = logg  --stat --ignore-all-space
  ln    = loggr --stat -n20

  # Show diffs with delta
  ldt   = logpr --tags
  ldc   = logpr --cumulative
  ldsc  = logpr --cumulative --stat
  ldsx  = logpr --stat --ignore-all-space
  ldd   = logp  --stat -n20
  ld    = logpr --stat -n20
  lda   = logpr --stat

  # --numstat

  ls  = logr --stat --decorate
  ls1 = ls --oneline
  lso = ls --pretty=stat
  lsg = ls --show-signature
  lsm = ls --no-merges ORIG_HEAD..
  lsgp = lsg -p --show-signature
  lsmp = lsm -p --no-merges ORIG_HEAD..

  lo    = log --graph --date=relative --decorate --abbrev-commit
  # Reference style + gpg key status  (BEST)
  lr    = lo --pretty=ref
  # Reference style (s)imple
  lrs   = lo --pretty=ref-simple
  # Reference style + right aligned and (w)ide
  lrw   = lo --pretty=ref-wide
  # Reference style + gpg key status:signers name
  lrgpg = lo --pretty=ref-gpg

  # Decoration + gpg key status:key ID + full commit message
  ldf   = lo --pretty=decorate-full
  lrf   = lo --pretty=decorate-full
  # Decoration + gpg key status:signer's name
  ldgpg = lo --pretty=decorate-gpg

  [pretty]
  # STAT STYLE
  #   %h%d %s (%ar) - [%an]%n
  stat = %C(bold 48)%h%C(reset)%C(auto)%d%C(reset) %C(2)%s%C(reset) %C(bold 80)(%ar)%C(reset) - %C(bold 51)[%C(reset)%C(79)%an%C(bold 51)]%C(reset)

  # REFERENCE STYLE (short everything one line)
  # Reference style + gpg key status
  #   %h%d %<|(65,trunc)%s (%cr) %<|(82)[%G?] <%an>
  ref = %C(bold 52)%h%C(reset)%C(bold 48)%d%C(reset) %<|(65,trunc)%C(43)%s%C(reset) %C(bold 80)(%cr)%C(reset) %<|(82)%C(bold 50)[%C(bold 2)%G?%C(reset)%C(bold 50)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)
  # Reference style
  #   %h %<|(25)%an %<|(78)%s%d (%cr)
  ref-simple = %C(bold 52)%h%C(reset) %<|(25)%C(21)%an%C(reset) %<|(78)%C(43)%s%C(reset)%C(auto)%d%C(reset) %C(bold 80)(%cr)%C(reset)
  # Reference style + right aligned and wide
  #   %h %>>(20)%an %>>(68)%s%d %<(12)(%cr)
  ref-wide = %C(bold 52)%h%C(reset) %>>(20)%C(21)%an%C(reset) %>>(68)%C(43)%s%C(reset)%C(bold 48)%d%C(reset) %<(12)%C(bold 80)(%cr)%C(reset)
  # Reference style + decoration
  #   %h %s - (%ar) <%an>%d
  ref-decorate = %C(bold 48)%h%C(reset) %C(43)%s%C(reset) %C(bold 13)-%C(reset) %C(17)(%ar)%C(reset) %C(bold 52)<%an>%C(reset)%C(auto)%d%C(reset)%n
  # Reference style + gpg key status:signers name
  #   %h %d %s (%cr) %<|(76)[%G?:%GS] <%an>
  ref-gpg = %C(bold 52)%h%C(reset) %C(auto)%d%C(reset) %C(43)%s%C(reset) %C(17)(%cr)%C(reset) %C(bold 48)[%C(bold 2)%G?%C(reset):%C(bold 19)%GS%C(bold 48)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)

  # DECORATION STYLE
  # Decoration + gpg key status:signer's name + full commit message
  #   %h %d %s (%cr) %<|(76)[%G?:%GS] <%an>
  #   %b
  decorate-gpg = %C(bold 52)%h%C(reset) %C(auto)%d%C(reset) %C(43)%s%C(reset) %C(17)(%cr)%C(reset) %C(bold 48)[%C(bold 2)%G?%C(reset):%C(bold 19)%GS%C(bold 48)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)%n%C(3)%b%C(reset)
  # Decoration + gpg key status:key ID + full commit message
  #   commit %h %d %s (%cr) [%G?:%GK] <%an>
  #   %b
  decorate-full = %C(bold 48)commit%C(reset) %C(bold 52)%h%C(reset) %C(auto)%d%C(reset) %C(43)%s%C(reset) %C(17)(%cr)%C(reset) %C(bold 18)[%C(bold 2)%G?%C(reset):%C(bold 19)%GK%C(bold 13)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)%n%C(3)%b%C(reset)

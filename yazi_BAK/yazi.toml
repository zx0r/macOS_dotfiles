# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[general]
shell = "fish"
mouse = true
true_color = true

[plugins]
starship = { path = "$HOME/.config/yazi/plugins/starship.yazi" }

[prompt]
format = "starship"

[keybindings]
"n" = "nvim {file}"
"c" = "codium {file}"
"t" = "tmux new-session -A -s yazi"

[manager]
#ratio          = [ 3, 6, 8 ]
ratio          = [ 1, 2, 4 ]  # Sidebar:Main:Preview ratio
sort_by        = "natural"  # Sort files alphabetically
# sort_by        = "alphabetical"
sort_sensitive = false  # Case-insensitive sorting
sort_reverse   = false  # Normal sorting order
sort_dir_first = true  # Show directories first
sort_translit  = false  # No transliteration for sorting
linemode       = "size"  # No line numbers
show_hidden    = false  # Hide hidden files by default
show_symlink   = true  # Show symbolic links
scrolloff      = 5  # Scroll offset for better navigation
mouse_events   = [ "click", "scroll" ]  # Enable mouse support
#title_format   = "Yazi: {cwd}"  # Window title format
title_format   = "{cwd} â€” File Manager"

[preview]
wrap            = "yes"  # No text wrapping
tab_size        = 2  # Tab size for text files
max_width       = 2560  # Max width for preview
max_height      = 1440  # Max height for preview
image_delay     = 30  # Image preview delay (ms)
#cache_dir       = ""  # No cache directory
cache_dir       = "~/.cache/yazi/"
image_filter    = "triangle"  # High-quality image scaling
image_quality   = 90  # Image preview quality
sixel_fraction  = 10  # Sixel image scaling
ueberzug_scale  = 1  # Ueberzug scaling factor
ueberzug_offset = [ 0, 0, 0, 0 ]  # Ueberzug offset


[file_associations]
# Text files
"*.txt" = "nvim"
"*.md"  = "nvim"

# Code files
"*.py"  = "codium"
"*.js"  = "codium"
"*.rs"  = "codium"

# Image files (platform-specific)
"*.png" = [
  { run = 'open "$@"', for = "macos" },  # macOS
  { run = 'xdg-open "$@"', for = "linux" },  # Linux
  { run = 'start "" "$@"', for = "windows" },  # Windows
]
"*.jpg" = [
  { run = 'open "$@"', for = "macos" },  # macOS
  { run = 'xdg-open "$@"', for = "linux" },  # Linux
  { run = 'start "" "$@"', for = "windows" },  # Windows
]

[platform]
macos   = { shell = "fish", open_command = "open" }
linux   = { shell = "fish", open_command = "xdg-open" }
windows = { shell = "fish", open_command = "start" }

[opener]
folder = [
  # Linux
  { run = 'hyprctl dispatch exec "[float; size 60% 60%; center 1] nemo" "$@"', orphan = true, desc = "nemo", for = "linux" },
  { run = '''fish -c "nvim "$1""''', block = true, desc = "neovim", for = "linux" },
  { run = 'kitty --detach nvim "$@"', orphan = true, desc = "neovim (detached)", for = "linux" },
  { run = '''fish -c "lazygit -p "$1""''', block = true, desc = "lazygit", for = "linux" },
  { run = 'codium  "$@"', orphan = true, desc = "vscodium", for = "linux" },
  { run = 'kitty "$@"', orphan = true, desc = "kitty", for = "linux" },
  { run = 'xdg-open "$@"', orphan = true, desc = "xdg-open", for = "linux" },

  # macOS
  { run = 'open "$@"', orphan = true, desc = "Finder", for = "macos" },
  { run = '''fish -c "nvim "$1""''', block = true, desc = "neovim", for = "macos" },
  { run = 'kitty --detach nvim "$@"', orphan = true, desc = "neovim (detached)", for = "macos" },
  { run = '''fish -c "lazygit -p "$1""''', block = true, desc = "lazygit", for = "macos" },
  { run = 'codium  "$@"', orphan = true, desc = "vscodium", for = "macos" },
  { run = 'kitty "$@"', orphan = true, desc = "kitty", for = "macos" },

  # Windows
  { run = 'explorer "$@"', orphan = true, desc = "Explorer", for = "windows" },
  { run = '''fish -c "nvim "$1""''', block = true, desc = "neovim", for = "windows" },
  { run = 'kitty --detach nvim "$@"', orphan = true, desc = "neovim (detached)", for = "windows" },
  { run = '''fish -c "lazygit -p "$1""''', block = true, desc = "lazygit", for = "windows" },
  { run = 'codium  "$@"', orphan = true, desc = "vscodium", for = "windows" },
  { run = 'kitty "$@"', orphan = true, desc = "kitty", for = "windows" },
]

text = [
  # Linux
  { run = '$EDITOR "$@"', block = true, desc = "$EDITOR", for = "linux" },
  { run = 'nvim "$@"', block = true, desc = "neovim", for = "linux" },
  { run = 'kitty --detach nvim "$@"', block = true, desc = "neovim (detached)", for = "linux" },
  { run = 'codium  "$@"', orphan = true, desc = "vscodium", for = "linux" },
  { run = 'xdg-open "$@"', orphan = true, desc = "xdg-open", for = "linux" },

  # macOS
  { run = '$EDITOR "$@"', block = true, desc = "$EDITOR", for = "macos" },
  { run = 'nvim "$@"', block = true, desc = "neovim", for = "macos" },
  { run = 'kitty --detach nvim "$@"', block = true, desc = "neovim (detached)", for = "macos" },
  { run = 'codium  "$@"', orphan = true, desc = "vscodium", for = "macos" },
  { run = 'open "$@"', orphan = true, desc = "open", for = "macos" },

  # Windows
  { run = '$EDITOR "$@"', block = true, desc = "$EDITOR", for = "windows" },
  { run = 'nvim "$@"', block = true, desc = "neovim", for = "windows" },
  { run = 'kitty --detach nvim "$@"', block = true, desc = "neovim (detached)", for = "windows" },
  { run = 'codium  "$@"', orphan = true, desc = "vscodium", for = "windows" },
  { run = 'start "" "$@"', orphan = true, desc = "start", for = "windows" },
]

document = [
  # Linux
  { run = 'xdg-open "$@"', orphan = true, desc = "xdg-open", for = "linux" },
  { run = 'zathura "$@"', orphan = true, desc = "zathura", for = "linux" },
  { run = 'libreoffice "$@"', orphan = true, desc = "libreoffice", for = "linux" },

  # macOS
  { run = 'open "$@"', orphan = true, desc = "open", for = "macos" },
  { run = 'zathura "$@"', orphan = true, desc = "zathura", for = "macos" },
  { run = 'libreoffice "$@"', orphan = true, desc = "libreoffice", for = "macos" },

  # Windows
  { run = 'start "" "$@"', orphan = true, desc = "start", for = "windows" },
  { run = 'zathura "$@"', orphan = true, desc = "zathura", for = "windows" },
  { run = 'libreoffice "$@"', orphan = true, desc = "libreoffice", for = "windows" },
]

image = [
  # Linux
  { run = 'xdg-open "$@"', orphan = true, desc = "xdg-open", for = "linux" },
  { run = 'qimgv "$@"', orphan = true, desc = "qimgv", for = "linux" },
  { run = 'krita "$@"', orphan = true, desc = "krita", for = "linux" },
  { run = 'satty --filename "$@"', orphan = true, desc = "satty", for = "linux" },

  # macOS
  { run = 'open "$@"', orphan = true, desc = "open", for = "macos" },
  { run = 'qimgv "$@"', orphan = true, desc = "qimgv", for = "macos" },
  { run = 'krita "$@"', orphan = true, desc = "krita", for = "macos" },
  { run = 'satty --filename "$@"', orphan = true, desc = "satty", for = "macos" },

  # Windows
  { run = 'start "" "$@"', orphan = true, desc = "start", for = "windows" },
  { run = 'qimgv "$@"', orphan = true, desc = "qimgv", for = "windows" },
  { run = 'krita "$@"', orphan = true, desc = "krita", for = "windows" },
  { run = 'satty --filename "$@"', orphan = true, desc = "satty", for = "windows" },
]

video = [
  # Linux
  { run = 'xdg-open "$@"', orphan = true, desc = "xdg-open", for = "linux" },
  { run = 'mpv "$@"', orphan = true, desc = "mpv", for = "linux" },
  { run = 'vlc "$@"', orphan = true, desc = "vlc", for = "linux" },

  # macOS
  { run = 'open "$@"', orphan = true, desc = "open", for = "macos" },
  { run = 'mpv "$@"', orphan = true, desc = "mpv", for = "macos" },
  { run = 'vlc "$@"', orphan = true, desc = "vlc", for = "macos" },

  # Windows
  { run = 'start "" "$@"', orphan = true, desc = "start", for = "windows" },
  { run = 'mpv "$@"', orphan = true, desc = "mpv", for = "windows" },
  { run = 'vlc "$@"', orphan = true, desc = "vlc", for = "windows" },
]

[open]
rules = [
  { name = "*/", use = "folder" },

  { mime = "text/*", use = "text" },
  { mime = "image/*", use = "image" },
  { mime = "video/*", use = "video" },
  { mime = "application/octet-stream", use = "video" },
  { mime = "audio/*", use = "audio" },
  { mime = "inode/x-empty", use = "text" },
  { mime = "application/json", use = "text" },

  { mime = "application/zip", use = "archive" },
  { mime = "application/gzip", use = "archive" },
  { mime = "application/x-bzip", use = "archive" },
  { mime = "application/x-bzip2", use = "archive" },
  { mime = "application/x-tar", use = "archive" },
  { mime = "application/x-7z-compressed", use = "archive" },
  { mime = "application/x-rar", use = "archive" },
  { mime = "application/pdf", use = "document" },
  { mime = "application/epub+zip", use = "document" },
  { mime = "application/x-mobipocket-ebook", use = "document" },

  { mime = "*", use = "fallback" },
]

[tasks]
micro_workers    = 10  # Number of micro task workers
macro_workers    = 10  # Number of macro task workers
bizarre_retry    = 3  # Retry attempts for failed tasks
image_alloc      = 536870912  # 512MB image memory allocation
image_bound      = [ 0, 0 ]  # Image boundary
suppress_preload = false  # Enable preloading

[plugin]

fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
spotters = [
	{ name = "*/", run = "folder" },
	# Code
	{ mime = "text/*", run = "nvim" },
	{ mime = "*/{xml,javascript,wine-extension-ini}", run = "nvim" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# Fallback
	{ name = "*", run = "file" },
]
preloaders = [
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
]

previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,ndjson}", run = "json" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
	{ mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
	{ name = "*.{AppImage,appimage}", run = "archive" },
	# Virtual Disk / Disk Image
	{ mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
	{ mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
	{ name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
	# Empty file
	{ mime = "inode/empty", run = "empty" },
	# Fallback
	{ name = "*", run = "file" },
]

# fetchers = [
# 	{ id = "current-size", name = "*/", run = "current-size", prio = "normal" },
# 	{ id = "current-size", name = "*", run = "current-size",prio = "normal" },
# ]

prepend_previewers = [
  { name = "*.csv", run = "rich-preview"}, # for csv files
 # { name = "*.md", run = "glow" },
  { name = "*.md", run = "rich-preview" }, # for markdown (.md) files
  { name = "*.rst", run = "rich-preview"}, # for restructured text (.rst) files
  { name = "*.ipynb", run = "rich-preview"}, # for jupyter notebooks (.ipynb)
  { name = "*.json", run = "rich-preview"}, # for json (.json) files
# { name = "*.lang_type", run = "rich-preview"} # for particular language files eg. .py, .go., .lua, etc.
  { name = "*.html", run = "html" },
  { name = "*.{pdb,pqr}", run = "code" },
  { mime = "audio/*", run = "exifaudio" },
  { mime = "application/x-xz", run = "ouch" },
  { mime = "application/*zip", run = "ouch" },
  { mime = "application/x-rar", run = "ouch" },
  { mime = "application/x-tar", run = "ouch" },
  { mime = "application/x-bzip2", run = "ouch" },
  { mime = "application/x-7z-compressed", run = "ouch" },
  { mime = "application/octet-stream", run = "video"},
  { mime = "application/epub+zip", run = "epub-preview" },
  { mime = "application/x-bittorrent", run = "torrent-preview" },

]

prepend_preloaders= [
	# { mime = "image/{avif,hei?,jxl,svg+xml}", run = "disable" },
	# { mime = "image/*", run = "disable" },
	# Video
	{ mime = "video/*", run = "disable" },
	# PDF
	# { mime = "application/pdf", run = "disable" },
	# Font
	{ mime = "font/*", run = "disable" },
	{ mime = "application/vnd.ms-opentype", run = "disable" },
]

[[plugin.prepend_fetchers]]
id   = "mime"
if   = "!(mime|dummy)"
name = "*"
run  = "mime-ext"
prio = "high"

[[plugin.prepend_fetchers]]
id   = "git"
name = "*"
run  = "git"

[[plugin.prepend_fetchers]]
id   = "git"
name = "*/"
run  = "git"


[[plugin.prepend_fetchers]]
id   = "current-size"
name = "*"
run  = "current-size"

[[plugin.prepend_fetchers]]
id   = "current-size"
name = "*/"
run  = "current-size"



[[plugin.preview]]
bat_theme = "Dracula"

[input]
cursor_blink = true  # Disable cursor blinking

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]
# trash
trash_title 	= "Trash {n} selected file{s}?"
trash_origin	= "center"
trash_offset	= [ 0, 0, 70, 20 ]

# delete
delete_title 	= "Permanently delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# quit
quit_title   = "Quit?"
quit_content = "The following task is still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]

[select]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by      	 = "none"  # No sorting for which
sort_sensitive = false  # Case-insensitive sorting
sort_reverse 	 = false  # Normal sorting order
sort_translit  = false  # No transliteration for sorting

[log]
enabled = false


# NOTE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#  ████████╗███╗   ███╗██╗   ██╗██╗  ██╗
#  ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝
#     ██║   ██╔████╔██║██║   ██║ ╚███╔╝
#     ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗
#     ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗
#     ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝
#
#  Author       : zx0r
#  License      : MIT License
#  Description  : Stay hungry; Stay foolish
#  Contact Info : https://github.com/zx0r/hyprdots-gentoo

# ━━━ Key Bindings ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

bind-key -N "Display help menu" C-? \
  display-menu -x W -y S \
    "Horizontal Split"                   | "split-window -h"  \
    "Vertical Split"                     - "split-window -v"  \
    "Swap Up"                            u "swap-pane -U"     \
    "Swap Down"                          d "swap-pane -D"     \
    "Kill Pane"                          x kill-pane          \
    "New Window"                         N new-window         \
    "Rename Window"                      R "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
    "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

set -s command-alias[1] zoom='resize-pane -Z'
set -s command-alias[2] dumpv='showmsgs'
set -s command-alias[3] dumpenv='show-environment'
set -s command-alias[4] seth='set-hook'
set -s command-alias[5] showh='show-hooks'
set -s command-alias[6] dispv='display -pv'           # display status vars
# set -s command-alias[7] dispp='display -pv'           # display status vars
# show = show-options

# FIX: C-/
set -sg user-keys[0] "\e[31;5u"
bind -N 'Describe keybinding' User0 { command-prompt -kpkey { list-keys -1N '%%' } }

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

unbind C-b
unbind t
unbind '"'
unbind %
# unbind R
# bind R respawn-pane -k

# bind C-a send-prefix
set -g prefix C-a
bind C-a send C-a

# Set an additional prefix
# set -g prefix2 C-F11
# bind C-F11 send C-F11

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

bind -N "Toggle mouse ON"  m { set -gq mouse on ; display 'Mouse: ON' }
bind -N "Toggle mouse OFF" M { set -gq mouse off; display 'Mouse: OFF' }

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# bind -N 'Clock mode'   C-t      clock-mode
bind -N "Toggle statusbar" C-t if -F '#{==:#{status},on}' 'set status off' 'set status on'

# Switch between synchronize all pane
bind -N "Toggle pane synchronization" C-g \
  if -F '#{pane_synchronized}' {
    set -w synchronize-panes off; display "Sync off"
  } {
    set -w synchronize-panes on; display  "Sync on"
  }

# Renaming
bind -N "Rename window"  A   command-prompt "renamew %%"
bind -N "Rename session" R   command-prompt -I "#S" "rename-session '%%'"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Edit configuration file in a new tmux window
bind -N "Edit Tmux configuration" e new-window -n 'conf' \
    "nvim $XDG_CONFIG_HOME/tmux/tmux.conf && \
     tmux source-file $XDG_CONFIG_HOME/tmux/tmux.conf && \
     tmux display-message '===== Configuration reloaded ====='"

# Reload configuration file directly using prefix + r
bind -N "Reload Tmux configuration" r {
    source-file $XDG_CONFIG_HOME/tmux/tmux.conf
    display-message "===== Configuration reloaded ====="
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

bind -N "Split pane horizontally" - \
  if -F '#{!=:#S,floating}' {
      splitw -v -c '#{pane_current_path}'
  } {
      set -uw pane-border-status
      run "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh update_mru_pane_ids"
      run 'bash -c "tmux joinp -v -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

bind -N "Split pane vertically" | \
  if -F '#{!=:#S,floating}' {
      splitw -h -c '#{pane_current_path}'
  } {
      set -uw pane-border-status
      run "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh update_mru_pane_ids"
      run 'bash -c "tmux joinp -h -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

if "[[ -x $TMUX_SCRIPT_DIR/tmux-fzf-panes.sh ]]" {
    set -g '@fzf_panes_ex_session_pat' '^(floating)$'
    set-hook -g pane-focus-in[10] "if -F \
        '#{&&:#{!=:#{client_key_table},resize},#{!=:#{session_name},floating}}' \
        'run -b \"$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh update_mru_pane_ids\"'"
    bind -N "Move to selected window"     .  run -b "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh new_window"
    bind -N "Move to selected window"     w  run -b "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh new_window"
    bind -N "Move to last window"        ';' run -b "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh select_last_pane"
    bind -N "Move to selected window" -n M-= run -b "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh new_window"
} {
    set-hook -ug pane-focus-in[10]
    bind -N "Move to selected window" w choose-tree -Z
    bind -N "Move to last window"     S choose-tree { movep -v -s "%%" }
    bind -N "Move to selected window" V choose-tree { movep -h -s "%%" }
}

bind -N "Break pane, send to end, follow" B \
  if -F '#{!=:#S,floating}' {
    breakp
  } {
    set -uw pane-border-status
    run "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh update_mru_pane_ids"
    run 'bash -c "tmux breakp -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

bind -N "Break pane, send to end, don't follow" '%' \
  if -F '#{!=:#S,floating}' {
    breakp -d
  } {
    set -uw pane-border-status
    run "$TMUX_SCRIPT_DIR/tmux-fzf-panes.sh update_mru_pane_ids"
    run 'bash -c "tmux breakp -d -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

bind -N "Break pane, send to left, don't follow" C-x breakp -bd

bind -N "Kill pane without confirmation" x killp
bind -N "Kill window with confirmation"  & { confirm-before -p "kill-window #W? [Y/n]" killw }
bind -N "Kill session with confirmation" X { confirm-before -p "kill-session #S? [Y/n]" kill-session }

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Create a new window and move to the right of the current one (prefix + c)
bind -N "Create new window (send to right)" c new-window -a -c "#{pane_current_path}"

# Create a new window and send it to the end (prefix + Shift + C)
bind -N "Create new window (send to end)" C new-window -c "#{pane_current_path}"

# Create a new session (prefix + Ctrl + c)
bind -N "Create new session" C-c new-session

# Switch windows
bind -n -N 'Select prev window' S-Left \
     if -F '#{>:#{session_windows},1}' { previous-window } { neww -c "#{pane_current_path}" }

bind -n -N 'Select next window' S-Right \
     if -F '#{>:#{session_windows},1}' { next-window }     { neww -c "#{pane_current_path}" }


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Swap with the previous window (prefix + {)
bind -N "Swap with previous window" "{" swap-window -t -1

# Swap with the next window (prefix + })
bind -N "Swap with next window" "}" swap-window -t +1

# Swap with the previous window and follow (prefix + Alt + [)
bind -N "Swap with previous window and follow" -r M-[ {
    swap-window -d -t -1
    display-message "#{window_index} <= #{e|+:#{window_index},1}"
}

# Swap with the next window and follow (prefix + Alt + ])
bind -N "Swap with next window and follow" -r M-] {
    swap-window -d -t +1
    display-message "#{e|-:#{window_index},1} => #{window_index}"
}

# Interactively choose a window (prefix + Space)
bind -N "Interactively choose window" Space \
    choose-tree -Z

# Swap pane
bind -N "Swap prev pane"  -r [  swapp -U
bind -N "Swap next pane"  -r ]  swapp -D

# Switch sessions
bind -N "Switch prev session" -r ( { switchc -p }
bind -N "Switch next session" -r ) { switchc -n }
bind -N "Switch to the last session" M-o { switchc -l }
bind -N "Interactively choose session" M-s { choose-tree -Zs }
# bind '.' choose-tree -Z -O time # Sort by last access

# Must have -N 'notes'
bind -N "Show keybindings" ? { list-keys -N }
bind -N 'Describe keybinding' M-/ { command-prompt -kpkey { list-keys -1N '%%' } }

# Cycle windows/panes (no prefix)
# bind -n M-S-a selectp -t :.+ \; resizep -Z # next pane zoom
# bind -n M-S-s selectp -t :.+               # next pane
# bind -n M-S-q selectw -t :-                # previous window
# bind -n M-S-w selectw -t :+                # next window

bind -N "Swap pane with selected pane" q displayp { swapp -t '%%' }
bind -N "Display pane numbers"         Q displayp

# Select last
bind -N 'Select last pane'   ,      lastp
bind -N 'Select last window' l      last
bind -n -N 'Select last window' M-y last

# Select pane movement
# bind -n M-S-Left  selectp -L
# bind -n M-S-Down  selectp -D
# bind -n M-S-Up    selectp -U
# bind -n M-S-Right selectp -R

# swap panes around
# bind -r -T prefix C-M-k selectp -U \; swap-pane -t !
# bind -r -T prefix C-M-j selectp -D \; swap-pane -t !
# bind -r -T prefix C-M-h selectp -L \; swap-pane -t !
# bind -r -T prefix C-M-l selectp -R \; swap-pane -t !

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# bind -N "Resize pane leftward"  -r H resizep -L 2
# bind -N "Resize pane rightward" -r L resizep -R 2
# bind -N "Resize pane downward"  -r J resizep -D 2
# bind -N "Resize pane upward"    -r K resizep -U 2

# Resize panes with Alt + arrow keys
bind -N "Resize pane leftward"  -r M-Left  resize-pane -L 2
bind -N "Resize pane rightward" -r M-Right resize-pane -R 2
bind -N "Resize pane downward"  -r M-Down  resize-pane -D 2
bind -N "Resize pane upward"    -r M-Up    resize-pane -U 2

# bind M-.  switchc -T resize
bind -N "Maximize pane" /    resizep -Z

bind -N "Rotate window" -r M-r rotate-window
bind -N "Rotate window layout" N next-layout

# Select layout
bind -N "Spread panes out evenly" E { select-layout -E }
bind -N "Select even-horizontal layout " -Tresize M-1 selectl even-horizontal \; switchc -Tresize
bind -N "Select even-vertical layout "   -Tresize M-2 selectl even-vertical   \; switchc -Tresize
bind -N "Select main-horizontal layout " -Tresize M-3 selectl main-horizontal \; switchc -Tresize
bind -N "Select main-vertical layout "   -Tresize M-4 selectl main-vertical   \; switchc -Tresize
bind -N "Select tiled layout"            -Tresize M-5 selectl tiled           \; switchc -Tresize

bind -N "Select window 1"  -T resize 1 selectp -t :.1 \; switchc -T resize
bind -N "Select window 2"  -T resize 2 selectp -t :.2 \; switchc -T resize
bind -N "Select window 3"  -T resize 3 selectp -t :.3 \; switchc -T resize
bind -N "Select window 4"  -T resize 4 selectp -t :.4 \; switchc -T resize
bind -N "Select window 5"  -T resize 5 selectp -t :.5 \; switchc -T resize
bind -N "Select window 6"  -T resize 6 selectp -t :.6 \; switchc -T resize
bind -N "Select window 7"  -T resize 7 selectp -t :.7 \; switchc -T resize
bind -N "Select window 8"  -T resize 8 selectp -t :.8 \; switchc -T resize
bind -N "Select window 9"  -T resize 9 selectp -t :.9 \; switchc -T resize
bind -N "Select window 10" -T resize 0 selectp -t :.10 \; switchc -T resize

# bind -N 'Clear the marked pane' M { select-pane -M }

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

bind -N "Swap windows, don't follow"               C-w choose-tree { swapw -t "%%" }
bind -N "Swap windows, follow"                     W   choose-tree { swapw -dt "%%" }
bind -N "Swap panes/windows, don't follow"         P   choose-tree { swapp -t "%%" }
bind -N "Send current pane vertically"            '@'  choose-tree { joinp -fh -t "%%" }
bind -N "Send current pane horizontally"          '#'  choose-tree { joinp -fv -t "%%" }
bind -N "Move window after selected, follow"       S   choose-tree { movew -at "%%" }

bind -N "Move window before selected, follow"       C-,   choose-tree { movew -bt "%%" }
bind -N "Move window after selected, follow"        C-.   choose-tree { movew -at "%%" }
bind -N "Move window before selected, don't follow" C-S-< choose-tree { movew -dbt "%%" }
bind -N "Move window after selected, don't follow"  C-S-> choose-tree { movew -dat "%%" }

# Join pane to window/session (interactively)
# bind C-i choose-tree -Zw { movep -t '%%' }
# bind C-w choose-tree -Zw { movew -t '%%' }
# bind @ join-pane -hs ! # most recently visited
# bind -n S-Up    choose-tree -Zw "swapw -t '%%'"

# bind C-f choose-tree 'move-pane -v -s "%%"'
# bind V choose-tree 'move-pane -h -s "%%"'

# Throw a pane into current pane from another window
bind -N "Join pane with current, horizontally" h      choose-tree { joinp -fv -s "%%" }
bind -N "Join pane with current, vertically"   v      choose-tree { joinp -fh -s "%%" }
bind -N "Join pane with current, horizontally" -n M-_ choose-tree { joinp -fv -s "%%" }
bind -N "Join pane with current, vertically"   -n M-| choose-tree { joinp -fh -s "%%" }

# bind C-M-w command-prompt -p "Swap Current Window To? (e.g 3; 4; session_name:5)" "swapw -t '%%'"
# bind C-M-p command-prompt -p "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
# bind M-p command-prompt -p "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"
#
bind -T root WheelUpPane \
  if -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'

bind -T root WheelDownPane \
  if -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# bind -T root WheelUpPane   if -F -t = "#{alternate_on}" "send -M" "selectp -t =; copy-mode -e; send -M"
# bind -T root WheelDownPane if -F -t = "#{alternate_on}" "send -M" "selectp -t =; send -M"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# bind M-v neww -n ytfzf \; send -t ytfzf 'ytfzf && tmux killw' 'Enter'     # YT FZF
# bind 'C-]' neww -n bookmarks -c $HOME \; send 'fsr && tmux killw' 'Enter' # Newsboat bookmarks
# bind Enter splitw -fv \; send 'BROWSER=w3m sr '                           # General surfraw

# Open YouTube Viewer in a horizontal split (prefix + Y)
bind -N "Open Youtube viewer command, horizontally" Y {
    split-window -h -fv
    send-keys 'youtube-viewer ' C-m
}

# Open Surfraw Google in a new window (prefix + G)
bind -N "Open surfraw google command, new window" G {
    new-window -n google
    send-keys -t google 'BROWSER=w3m sr google ' C-m
}

# Open Neomutt in a new window (prefix + Alt + m)
bind -n -N "Open Neomutt, new window" M-m {
    new-window -n email -c $HOME
    send-keys 'neomutt && tmux kill-window' C-m
}

# Open Newsboat RSS reader in a new window (prefix + Ctrl + n)
bind -N "Open newsboat, new window" C-n {
    new-window -n rss -c $HOME
    send-keys 'newsboat && tmux kill-window' C-m
}

# Open htop in a new window (prefix + Ctrl + h)
bind -N "Open htop, new window" C-h {
    new-window -n htop -c $HOME
    send-keys 'sudo htop && tmux kill-window' C-m
}

# Open Task Spooler in a new window with multiple splits (prefix + Alt + t)
bind -N "Open task spooler, new window" M-t {
    new-window -n spool -c $HOME
    send-keys -t spool 'tsp -C && watch ts' C-m
    
    # Vertical split with task spooler status
    split-window -t spool -v
    send-keys -t spool 'TS_SOCKET=/tmp/fm tsp -C && watch TS_SOCKET=/tmp/fm tsp' C-m
    
    # Additional vertical split for more info, reduced height
    split-window -t spool -v -p 10
}
bind C-l send C-l

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

bind -N "Open  (GUI), horizontally" 'M-\' {
    splitw -fv
    send 'bo && tmux kill-pane' 'Enter'
}

bind -N "Open  (GUI)" b \
  if -F '#{==:#S,floating}' {
    detach
  } {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w90% -h80% -E \
      'tmux new -A -s floating \
      "tmux set -w pane-border-status off; \
       tmux set remain-on-exit off; \
       TMUX_SESSION="floating" _FZF_OPTS="--height=100%" BUKU_NO_BG=1 fpath+=($XDG_BIN_DIR/functions) && bo && bo"'
  }

# ==  Bookmarks (w3m) ===
bind -N "Open  (w3m), new window" 'C-\' {
    neww -n bookmarks -c $HOME
    send 'bow && tmux killw' 'Enter'
}

# == Taskwarrior ==
bind -N "Open taskf" C-i {
    splitw -fv
    send 'taskf && tmux kill-pane' 'Enter'
}

# === Taskwarrior TUI ===
bind -n -N "Open taskwarrior TUI, new window" M-9 {
    neww -n taskwarrior -c $HOME
    send 'taskwarrior-tui && tmux killw' 'Enter'
}

# == Tmux completion ==
bind -n -N "Select pane (fzf)" M-0 \
     run "tmux-fzf-panes || :"
bind -N "Select words to paste from buffer (fzf)"      t \
     run 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words)"'
bind -N "Select words to paste from all buffers (fzf)" T \
     run 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words --all)"'

bind -N "Capture pane and open in Vim" M-c run \
  'FILE=/tmp/tmux-capture-$(date +%Y%m%d%H%M%S).txt; \
  tmux capture-pane -J -S -102400 -p > $FILE; \
  tmux neww "nvim $FILE"'

# bind j capture-pane \;\
#     save-buffer /tmp/tmux-buffer \;\
#     new-window -n "vim-copymode" '$SHELL -c "nvim /tmp/tmux-buffer"'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# bind Escape copy-mode     # default: [
# bind -n C-Enter copy-mode
bind -N "Enter copy-mode"    Enter copy-mode
bind -n -N "Enter copy-mode" C-F12 copy-mode
bind -N "Send C-F12"         C-F12 send C-F12

bind -N "List buffers"                  C-b    lsb
bind -N "Interactive clipboard history" p      pasteb     # default: ]
bind -N "Delete paste buffer"           +      { deleteb; display "Deleted current buffer" }

bind-key -N "Copy to tmux clipboard"   M-, {
  run "tmux set-buffer -- \"$(xsel -ob)\""
  display "Copied to tmux clipboard"
}
bind-key -N "Copy to system clipboard" M-. {
  run 'tmux show-buffer | xsel -ib --trim'
  display "Copied to system clipboard"
}

# bind 0 send C-l \; run 'tmux clear-history' \; display-message "Deleted current Tmux Clipboard History"

# Vim copy mode rebinds for
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it

# Fix mouse
#unbind -T root         MouseDrag1Pane
# unbind -T copy-mode-vi MouseDragEnd1Pane
# bind   -T copy-mode-vi MouseDown1Pane { selectp; send -X clear-selection }
#
# bind -N "Select word"            -T copy-mode-vi .      send -X select-word
# bind -N "Select line"            -T copy-mode-vi V      send -X select-line
# bind -N "Start visual selection" -T copy-mode-vi v      send -X begin-selection
# bind -N "Start visual block"     -T copy-mode-vi C-v  { send -X rectangle-toggle; send -X begin-selection }
# bind -N "Copy selection"  -T copy-mode-vi y       send -X copy-selection-and-cancel
# bind -N "Copy to EOL"     -T copy-mode-vi D       send -X copy-end-of-line-and-cancel
# bind -N "Copy line"       -T copy-mode-vi Y       send -X copy-line-and-cancel
# bind -N "Copy word"       -T copy-mode-vi S     { send -X select-word; send -X copy-selection-and-cancel }
# bind -N "Clear selection" -T copy-mode-vi Escape  send -X clear-selection
# bind -N "Cancel"          -T copy-mode-vi i       send -X cancel
# bind -N "Cancel"          -T copy-mode-vi q       send -X cancel
# bind -N "Goto EOL"        -T copy-mode-vi L       send -X end-of-line
# bind -N "Goto BOL"        -T copy-mode-vi H       send -X start-of-line
# bind -N "Goto MOL"        -T copy-mode-vi z       send -X middle-line
# bind -N "Set mark"        -T copy-mode-vi m       send -X set-mark
# bind -N "Goto mark"       -T copy-mode-vi "'"     send -X jump-to-mark
# bind -N "Jump again"      -T copy-mode-vi ';'     send -X jump-again
# bind -N "Jump reverse"    -T copy-mode-vi ,       send -X jump-reverse
# bind -N "Other end"       -T copy-mode-vi o       send -X other-end
# bind -N "Half-page up"    -T copy-mode-vi u       send -X halfpage-up
# bind -N "Half-page down"  -T copy-mode-vi d       send -X halfpage-down
# bind -N "Copy" -T copy-mode-vi Enter             send -X copy-pipe "xsel -ib"
# bind -N "Copy" -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xsel -ib"

bind -N "Equivalent vim-asterisk '*'" -T copy-mode-vi * \
  if -F '#{selection_active}' {
     send -X copy-pipe
     send -FX search-forward-text '#{buffer_sample}'
  } {
     send -FX search-forward '#{copy_cursor_word}'
  }

bind -N "Equivalent vim-asterisk '#'" -T copy-mode-vi "#" \
  if -F '#{selection_active}' {
     send -X copy-pipe
     send -FX search-backward-text '#{buffer_sample}'
     send -X search-again
  } {
     send -FX search-backward '#{copy_cursor_word}'
  }

bind -N "Surfraw: Google tmux buffer" -T copy-mode-vi R {
  send -X copy-selection
  neww -n google
  send -t google 'sr google "$(tmux show-buffer)" && tmux killw' 'Enter'
}

bind -N "YouTube: tmux buffer" -T copy-mode-vi U {
  send -X copy-selection
  neww -n youtube
  send -t youtube 'youtube-viewer "$(tmux show-buffer)" && tmux killw' 'Enter'
}

bind -N "w3m: tmux buffer" -T copy-mode-vi O {
  send -X copy-selection
  neww -n w3m
  send -t w3m 'w3m "$(tmux show-buffer)" && tmux killw' 'Enter'
}

bind -T choice-mode-vi h   send -X tree-collapse
bind -T choice-mode-vi l   send -X tree-expand
bind -T choice-mode-vi H   send -X tree-collapse-all
bind -T choice-mode-vi L   send -X tree-expand-all

bind -T choice-mode    C-d send -X halfpage-down
bind -T choice-mode    C-u send -X halfpage-up

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Smart pane switching with awareness of Vim splits.

# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind -n -N "Select the pane to the left" C-h \
  if-shell "$is_vim" { send C-h } { if -F '#{pane_at_left}'   '' 'selectp -L' }
bind -n -N "Select the pane to the bottom" C-j \
  if-shell "$is_vim" { send C-j } { if -F '#{pane_at_bottom}' '' 'selectp -D' }
bind -n -N "Select the pane to the bottom" C-k \
  if-shell "$is_vim" { send C-k } { if -F '#{pane_at_top}'    '' 'selectp -U' }
bind -n -N "Select the pane to the right" C-l \
  if-shell "$is_vim" { send C-l } { if -F '#{pane_at_right}'  '' 'selectp -R' }

bind -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'
bind -T copy-mode-vi 'C-\' selectp -l

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

bind -N "Attach a floating shell" "C-'" \
  if -F '#{==:#S,floating}' {
    detach
  } {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
  }

# Floating shell
bind -n -N "Attach a floating shell" M-S-F2 \
  if -F '#{==:#S,floating}' {
    detach
  } {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
  }

#bind "C-'" display-popup -h 40 -w 95 -E "tmux new-session -A -s popup"  # Start a floating session
#bind C-b splitw -h 40 -w 95 -p 40 -b -c ' # {pane_current_path}' lf # Open lf file manager

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

